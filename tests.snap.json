{
    "c": [
        {
            "d": false,
            "n": "testDiff.nim",
            "dc": [],
            "fc": "import simplediff, unittest, ../src/diff\n\nsuite \"Diff tests\":\n    test \"Simple int (addition)\":\n        let value = diff([1, 2, 3], [1, 2])\n        let expected = @[Diff[int](kind: NoChange, tokens: @[1, 2]), Diff[int](kind: Deletion, tokens: @[3])]\n        assert value == expected\n\n    test \"Simple string (addition)\":\n        let value = stringDiff(\"the word is\", \"the word is red\", seps={' '})\n        let expected = @[Diff[string](kind: NoChange, tokens: @[\"the\", \"word\", \"is\"]), Diff[string](kind: Insertion, tokens: @[\"red\"])]\n        assert value == expected\n\n    test \"Simple string with line (replacement)\":\n        let value = stringDiff(\"a\\nb\",\"a\\nc\")\n        let expected = @[Diff[string](kind: NoChange, tokens: @[\"a\"]), Diff[string](kind: Deletion, tokens: @[\"b\"]), Diff[string](kind: Insertion, tokens: @[\"c\"])];\n        assert value == expected\n\n    test \"Simple string (deletion)\":\n        let value = stringDiff(\"the word is blue\", \"the word is\", seps={' '})\n        let expected = @[Diff[string](kind: NoChange, tokens: @[\"the\", \"word\", \"is\"]), Diff[string](kind: Deletion, tokens: @[\"blue\"])]\n        assert value == expected\n        \n    test \"Adding lines in the middle\":\n        let value = stringDiff(\"a\\nc\",\"a\\nb\\nc\")\n        let expected = @[Diff[string](kind: NoChange, tokens: @[\"a\"]), Diff[string](kind: Insertion, tokens: @[\"b\"]), Diff[string](kind: NoChange, tokens: @[\"c\"])]\n        assert value == expected\n\n    test \"RelDiff (short)\":\n        let original = \"a\\nc\"\n        let expected = \"a\\nbc\"\n        let value = relDiff(original,expected);\n        let changed = applySteps(original, value)\n        assert changed == expected\n    \n    test \"RelDiff (lorepsum)\":\n        let original = \"\"\"\\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nAenean vel elit ut dolor fringilla tristique sed eu mi.\\nMorbi quis nunc ut tellus ullamcorper egestas eget eu ex.\\nNulla vitae ex eget turpis volutpat vehicula a in nisi.\\nMorbi et odio fermentum, dignissim magna at, hendrerit augue.\\nMauris fermentum odio vitae lorem porta, eget tristique diam malesuada.\\n\\nAenean ut nisi ut sem egestas ultricies.\\n\"\"\"\n        let expected = \"\"\"\\nDuis sit amet nisl sit amet odio faucibus aliquam at vitae libero.\\nIn pulvinar sapien sit amet orci consequat hendrerit a eget urna.\\nIn euismod dui sit amet orci ultrices, id lacinia sem rutrum.\\n\\nEtiam eu neque varius, dignissim lacus et, consectetur orci.\\nDonec tincidunt tortor sodales, mattis quam a, ullamcorper libero.\\nCurabitur nec quam facilisis, pulvinar ante ut, cursus velit.\\nSuspendisse suscipit ligula et nibh hendrerit tempor.\\nPhasellus vitae enim at eros dignissim rhoncus.\\n\\nVivamus dictum magna vel augue semper, ac fringilla mi fermentum.\\n\"\"\"\n        let steps = relDiff(original,expected);\n        let changed = applySteps(original, steps)        \n        assert changed == expected\n\n    test \"Inverse steps (short)\":\n        let original = \"a\\nb\"\n        let expected = \"a\\nc\"\n        let steps = relDiff(original,expected);\n        let changed = applySteps(expected, reverseSteps(steps)) \n        assert changed == original\n    \n    test \"Inverse steps (lorepsum)\":\n        let original = \"\"\"\\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nAenean vel elit ut dolor fringilla tristique sed eu mi.\\nMorbi quis nunc ut tellus ullamcorper egestas eget eu ex.\\nNulla vitae ex eget turpis volutpat vehicula a in nisi.\\nMorbi et odio fermentum, dignissim magna at, hendrerit augue.\\nMauris fermentum odio vitae lorem porta, eget tristique diam malesuada.\\n\\nAenean ut nisi ut sem egestas ultricies.\\n\"\"\"\n        let expected = \"\"\"\\nDuis sit amet nisl sit amet odio faucibus aliquam at vitae libero.\\nIn pulvinar sapien sit amet orci consequat hendrerit a eget urna.\\nIn euismod dui sit amet orci ultrices, id lacinia sem rutrum.\\n\\nEtiam eu neque varius, dignissim lacus et, consectetur orci.\\nDonec tincidunt tortor sodales, mattis quam a, ullamcorper libero.\\nCurabitur nec quam facilisis, pulvinar ante ut, cursus velit.\\nSuspendisse suscipit ligula et nibh hendrerit tempor.\\nPhasellus vitae enim at eros dignissim rhoncus.\\n\\nVivamus dictum magna vel augue semper, ac fringilla mi fermentum.\\n\"\"\"\n        let steps = relDiff(original,expected);\n        let changed = applySteps(expected, reverseSteps(steps))        \n        assert changed == original"
        },
        {
            "d": false,
            "n": "testCompress.nim",
            "dc": [],
            "fc": "import ../src/compression, unittest\n\nsuite \"Compression\":\n  # Setup\n  var initial: seq[int] = @[]\n  var final: seq[int] = @[]\n\n  test \"Sample JSON\":\n    let sample = \"\"\"{\"web-app\":{\"servlet\":[{\"servlet-name\":\"cofaxCDS\",\"servlet-class\":\"org.cofax.cds.CDSServlet\",\"init-param\":{\"configGlossary:installationAt\":\"Philadelphia,PA\",\"configGlossary:adminEmail\":\"ksm@pobox.com\",\"configGlossary:poweredBy\":\"Cofax\",\"configGlossary:poweredByIcon\":\"/images/cofax.gif\",\"configGlossary:staticPath\":\"/content/static\",\"templateProcessorClass\":\"org.cofax.WysiwygTemplate\",\"templateLoaderClass\":\"org.cofax.FilesTemplateLoader\",\"templatePath\":\"templates\",\"templateOverridePath\":\"\",\"defaultListTemplate\":\"listTemplate.htm\",\"defaultFileTemplate\":\"articleTemplate.htm\",\"useJSP\":false,\"jspListTemplate\":\"listTemplate.jsp\",\"jspFileTemplate\":\"articleTemplate.jsp\",\"cachePackageTagsTrack\":200,\"cachePackageTagsStore\":200,\"cachePackageTagsRefresh\":60,\"cacheTemplatesTrack\":100,\"cacheTemplatesStore\":50,\"cacheTemplatesRefresh\":15,\"cachePagesTrack\":200,\"cachePagesStore\":100,\"cachePagesRefresh\":10,\"cachePagesDirtyRead\":10,\"searchEngineListTemplate\":\"forSearchEnginesList.htm\",\"searchEngineFileTemplate\":\"forSearchEngines.htm\",\"searchEngineRobotsDb\":\"WEB-INF/robots.db\",\"useDataStore\":true,\"dataStoreClass\":\"org.cofax.SqlDataStore\",\"redirectionClass\":\"org.cofax.SqlRedirection\",\"dataStoreName\":\"cofax\",\"dataStoreDriver\":\"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\"dataStoreUrl\":\"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\"dataStoreUser\":\"sa\",\"dataStorePassword\":\"dataStoreTestQuery\",\"dataStoreTestQuery\":\"SETNOCOUNTON;selecttest='test';\",\"dataStoreLogFile\":\"/usr/local/tomcat/logs/datastore.log\",\"dataStoreInitConns\":10,\"dataStoreMaxConns\":100,\"dataStoreConnUsageLimit\":100,\"dataStoreLogLevel\":\"debug\",\"maxUrlLength\":500}},{\"servlet-name\":\"cofaxEmail\",\"servlet-class\":\"org.cofax.cds.EmailServlet\",\"init-param\":{\"mailHost\":\"mail1\",\"mailHostOverride\":\"mail2\"}},{\"servlet-name\":\"cofaxAdmin\",\"servlet-class\":\"org.cofax.cds.AdminServlet\"},{\"servlet-name\":\"fileServlet\",\"servlet-class\":\"org.cofax.cds.FileServlet\"},{\"servlet-name\":\"cofaxTools\",\"servlet-class\":\"org.cofax.cms.CofaxToolsServlet\",\"init-param\":{\"templatePath\":\"toolstemplates/\",\"log\":1,\"logLocation\":\"/usr/local/tomcat/logs/CofaxTools.log\",\"logMaxSize\":\"\",\"dataLog\":1,\"dataLogLocation\":\"/usr/local/tomcat/logs/dataLog.log\",\"dataLogMaxSize\":\"\",\"removePageCache\":\"/content/admin/remove?cache=pages&id=\",\"removeTemplateCache\":\"/content/admin/remove?cache=templates&id=\",\"fileTransferFolder\":\"/usr/local/tomcat/webapps/content/fileTransferFolder\",\"lookInContext\":1,\"adminGroupID\":4,\"betaServer\":true}}],\"servlet-mapping\":{\"cofaxCDS\":\"/\",\"cofaxEmail\":\"/cofaxutil/aemail/*\",\"cofaxAdmin\":\"/admin/*\",\"fileServlet\":\"/static/*\",\"cofaxTools\":\"/tools/*\"},\"taglib\":{\"taglib-uri\":\"cofax.tld\",\"taglib-location\":\"/WEB-INF/tlds/cofax.tld\"}}}\"\"\"\n    let compressed = compress(sample)\n    let decompressed = decompress(compressed)\n    assert sample == decompressed\n    assert compressed.len() < sample.len()\n    initial.add(sample.len())\n    final.add(compressed.len())\n\n  test \"Lorepsum ipsum (100)\":\n    let sample = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vel ante at erat interdum vestibulum.\"\"\"\n    let compressed = compress(sample)\n    let decompressed = decompress(compressed)\n    assert sample == decompressed\n    assert compressed.len() < sample.len()\n    initial.add(sample.len())\n    final.add(compressed.len())\n\n  test \"Lorepsum ipsum (1000)\":\n    let sample = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer tristique, lorem quis malesuada pulvinar, nulla est dictum mauris, ut ultricies est magna eget tellus. Maecenas sed elementum dui. Donec pulvinar hendrerit vulputate. Nulla nec faucibus nunc, eget malesuada magna. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Duis magna quam, imperdiet non elit sed, sollicitudin laoreet nunc. Curabitur sodales urna et lobortis dapibus. Nam interdum quam lectus, dignissim feugiat felis placerat ut. Phasellus quis libero velit. Suspendisse potenti. Nullam imperdiet lobortis tincidunt. Nulla placerat neque nunc, nec fermentum tortor dictum quis. Phasellus molestie odio sed finibus condimentum. Sed eget sem placerat, tristique ligula vitae, commodo neque. Nullam dapibus mollis dui sit amet dictum. Vestibulum eu mattis lorem, ut sollicitudin sem. Vivamus sed diam in lorem feugiat sagittis. Maecenas ut nunc ut ipsum suscipit tempor vel non blandit. \"\"\"\n    let compressed = compress(sample)\n    let decompressed = decompress(compressed)\n    assert sample == decompressed\n    assert compressed.len() < sample.len()\n    initial.add(sample.len())\n    final.add(compressed.len())\n  \n  # End (average of compression ratios)\n  var all: seq[int] = @[];\n  var n = 0;\n  while n<initial.len():\n    all.add(int((initial[n] - final[n])/initial[n] * 100))\n    n = n + 1;\n\n  var total = 0;\n  for a in all:\n    total = total + a;\n  \n  echo \"Average compression ratio: \", (total/all.len()), \"%\""
        }
    ],
    "rc": [],
    "d": "2025-04-19",
    "k": "raw",
    "f": false,
    "t": ""
}